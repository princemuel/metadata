---
import { Head, Indicator } from "@/components";
import { tw } from "@/helpers/utils";
import { fontMono, fontSans, fontAccent } from "@/lib/fonts";
import { AstroFont as Fonts } from "astro-font";
import { ViewTransitions } from "astro:transitions";

type Props = Meta & { type?: OpenGraph["type"] };

const {
  title,
  image,
  tags,
  type,
  canonical,
  description,
  publishedAt,
  updatedAt,
} = Astro.props;
---

<!doctype html>
<html
  lang="en"
  dir="auto"
  data-dark-reader-mode="dynamic"
  data-dark-reader-theme="dark"
  data-theme="github-dark"
  class={tw("__sans__ __accent__ __mono__")}
>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- <script define:vars="">
      let theme;
      const $root = document.documentElement;
      try {
        theme = localStorage.getItem("site-theme");
        invariant(
          theme,
          `Expected \`theme\` to be of type \`%s\` but received type \`%s\``,
          "string",
          theme,
        );
      } catch (error) {
        const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
          .matches
          ? "dark"
          : "light";
        localStorage.setItem("site-theme", systemTheme);
        theme = localStorage.getItem("site-theme");
      }

      const resolvedTheme = theme || "dark";

      $root.dataset.darkReaderTheme = resolvedTheme;
      $root.dataset.theme = `github-${resolvedTheme}`;
    </script> -->

    <Head
      title={title}
      description={description}
      image={image}
      og={{ type }}
      tags={tags}
      publishedAt={publishedAt}
      updatedAt={updatedAt}
      canonical={canonical}
    />

    {/* @ts-expect-error override expected font type  */}
    <Fonts config={[fontSans, fontMono, fontAccent]} />
    <ViewTransitions />

    <!-- <script src="/src/scripts/pwa.ts"></script> -->
  </head>

  <body class="antialiased dark:bg-[#0e141b]">
    <slot />

    <Indicator />

    <script>
      const cssHasPseudo = (await import("css-has-pseudo/browser")).default;
      cssHasPseudo(document);
    </script>
  </body>
</html>
