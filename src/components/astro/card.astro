---
import { tw } from "@/helpers";
import { ONE_DAY_IN_MS } from "@/lib/config";
import type { HTMLAttributes } from "astro/types";
import { Image } from "astro:assets";
import Link from "./link.astro";
import TechIcon from "./tech-stack-icon.astro";
import Time from "./time.astro";

type Props = Prettify<HTMLAttributes<"article"> & InternalProps>;

type InternalProps = Omit<Meta, ""> & {
  platform?: {
    name: string;
    image?: string;
  };
};

const {
  class: className,
  image,
  tags,
  publishedAt,
  platform,

  ...rest
} = Astro.props;

const isNew = (value?: ConstructorParameters<typeof Date>[0]) => {
  if (!value) return false;
  // if (!value) throw new SyntaxError("Invalid Date");
  const difference = new Date().getTime() - new Date(value).getTime();
  return difference / ONE_DAY_IN_MS < 30;
};

// const response = await import("@/assets/forrest-gump-quote.webp");

// console.log(response.default);
---

<article
  {...rest}
  class:list={tw([
    "rounded border border-white/60 shadow-lg",
    "transition duration-500 ease-in-out hover:-translate-y-2",
    "",
    className,
  ])}
>
  <div class="relative overflow-hidden">
    <Link
      href={"/"}
      class={tw([
        "flex flex-col items-center gap-3 md:flex-row md:gap-6",
        "rounded border border-white/60 p-4",
      ])}
    >
      <strong
        data-latest={isNew(publishedAt)}
        class="absolute right-8 top-4 hidden size-8 w-full translate-x-1/2 rotate-45 transform items-center justify-center bg-brand-400 text-center font-semibold uppercase text-white shadow-lg data-[latest=true]:flex"
      >
        New
      </strong>
      {
        image && (
          <Image
            src={image.src}
            width={576}
            height={324}
            alt={image.alt}
            class={"w-full md:w-1/2"}
          />
        )
      }

      <div class="flex flex-col gap-2">
        <span class="flex flex-col gap-2 sm:flex-row sm:items-center">
          {
            platform && (
              <>
                {platform.image && (
                  <div class="flex items-center gap-2">
                    <Image
                      src={platform.image}
                      width="24"
                      height="24"
                      alt={platform.name}
                    />
                    <small class="text-xs text-brand-500">
                      {platform.name}
                    </small>
                  </div>
                )}
                <span class="hidden sm:inline-block">&bull;</span>
              </>
            )
          }
        </span>

        <Time class="text-xs font-bold text-brand-500" />

        <h3 class="block text-xl text-white">Lorem ipsum dolor sit.</h3>
        <p class="text-sm font-light">
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Optio earum
          nobis, alias reiciendis doloribus pariatur excepturi sit maiores id
          minus?...
        </p>

        <ul class={"flex flex-wrap gap-2"}>
          {
            (tags || ["AlpineJS", "Node.JS", "Docker"]).map((item) => (
              <TechIcon id={item} class="bg-blue-700 text-xs  text-red-600" />
            ))
          }
        </ul>
      </div>
    </Link>
  </div>
</article>
