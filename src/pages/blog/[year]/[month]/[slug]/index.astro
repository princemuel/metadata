---
import { Profile } from "@/components/astro";
import Root from "@/layouts/root.astro";
import { fetchResource } from "@/lib/utils";
import { blogWebsite } from "@/schema";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import { getEntry } from "astro:content";
import type { BreadcrumbList, WithContext } from "schema-dts";

export const getStaticPaths = (async () => {
  const entries = await fetchResource("posts");
  return entries.map((entry) => {
    const [year, month, slug] = entry.slug.split("/");
    return {
      params: { year, month, slug },
      props: { entry },
    };
  });
}) satisfies GetStaticPaths;

//@ts-expect-error
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { entry } = Astro.props;
// const author = await getEntry(entry.data.author);
// const blog_jsonld = await getBlogPostSchema(entry);

const [author, data] = await Promise.all([
  getEntry(entry.data.author),
  // getBlogPostSchema(entry),
  entry.render(),
]);

const { Content } = data;

const breadcrumbs = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  itemListElement: [
    {
      "@type": "ListItem",
      position: 1,
      name: "Blog",
      item: new URL("/blog", import.meta.env.SITE).toString(),
    },
    {
      "@type": "ListItem",
      position: 2,
      name: entry.data.title,
      item: new URL(`/blog/${entry.slug}`, import.meta.env.SITE).toString(),
    },
  ],
} as WithContext<BreadcrumbList>;

const schema = {
  "@context": "https://schema.org",
  "@graph": [breadcrumbs, blogWebsite],
};
---

<Root title={entry.data.title} description={entry.data.description} jsonld={schema}>
  <Fragment slot="meta">
    <dl class="flex items-center justify-between gap-2 font-accent font-semibold text-emerald-500">
      <dt class="text-sm text-inherit">Blog</dt>
      <dd
        class="rounded-sm border border-stone-300 bg-transparent px-2 py-1 text-xs text-inherit dark:border-stone-900"
      >
        {author.data.name}
      </dd>
    </dl>

    <h1 id="heading" class="my-8">{entry.data.title}</h1>
    <p class="">
      {entry.data.description}
    </p>
  </Fragment>

  <Fragment slot="main">
    <div
      class="prose prose-amber mx-auto max-w-none dark:prose-invert prose-headings:font-accent prose-headings:font-black"
    >
      <article class:list={["[&_.linked]:font-black [&_.linked]:no-underline"]}>
        <Content />
      </article>
    </div>
  </Fragment>

  <Fragment slot="profile">
    <Profile />
  </Fragment>
</Root>
