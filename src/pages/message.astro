---
import { parseError } from "@/helpers";
import { action } from "@/lib/action";
import { ZodError, z } from "zod";

const schema = z.object({
  name: z.string().min(1).max(255),
  email: z.string().email(),
});

const { response, result } = await action(Astro.request, async (request) => {
  let errors: Record<string, string> = {};
  let data: Record<string, string> = {};
  try {
    const formData = await request.formData();
    if (formData.get("bot-field")) throw new Error("Invalid Form Submission");

    const result = schema.parse(Object.fromEntries(formData.entries()));

    data.message = `Thanks ${result.name}. Your message has been sent!`;

    return { data: data, errors: null, status: "success" };
  } catch (e) {
    if (e instanceof ZodError) {
      for (let key of Object.keys(e.formErrors?.fieldErrors)) {
        errors[key] = e.formErrors?.fieldErrors?.[key]?.[0] ?? "";
      }

      return { data: null, errors: errors, status: "error" };
    }

    errors.unknown = parseError(e);
    return { data: null, errors: errors, status: "error" };
  }
});

if (response) return response;
---

<div>
  <span role="alert" aria-live="polite" data-form-success="">{result?.data?.message}</span>
  <form method="post" data-id="contact-form" style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
    <span role="alert" aria-live="polite" data-form-error="unknown">{result?.errors?.unknown}</span>
    <input name="bot-field" placeholder="do not fill this" type="hidden" />
    <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
      <label for="fields.name.input">Name</label>
      <input
        type="text"
        id="fields.name.input"
        placeholder="Jane Doe"
        autocomplete="name"
        aria-errormessage="fields.name.error"
      />
      <span role="alert" aria-live="polite" id="fields.name.error" data-form-error="name">
        {result?.errors?.name}
      </span>
    </div>

    <div style={{ display: "flex", flexDirection: "column", gap: "1rem" }}>
      <label for="fields.email.input">Email</label>
      <input
        type="email"
        id="fields.email.input"
        placeholder="email@example.com"
        autocomplete="email"
        aria-errormessage="fields.email.error"
      />
      <span role="alert" aria-live="polite" id="fields.email.error" data-form-error="email">
        {result?.errors?.email}
      </span>
    </div>

    <button type="submit" style={{ display: "flex", flexDirection: "column", width: "100%" }}>Send Message</button>
  </form>
</div>

<script>
  import { getElement, getElements } from "@/helpers";
  import { handleForm } from "@/lib/form";

  const form = getElement('[data-id="contact-form"]', HTMLFormElement);
  const errors = getElements("[data-form-error]", HTMLSpanElement, form);
  const success = getElement("[data-form-success]", HTMLSpanElement, form);

  handleForm<Record<string, any>>(form, (result) => {
    errors.forEach((element) => {
      const attr = element.getAttribute("data-form-error") ?? "";
      element.textContent = result?.errors?.[attr] ?? "";
    });

    if (result.status === "success") form.reset();
    success.textContent = result?.data;
  });
</script>
