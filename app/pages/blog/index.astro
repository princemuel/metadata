---
import Article from "@/components/article.astro";
import Link from "@/components/link.astro";
import PostDivider from "@/components/post-divider.astro";
import Time from "@/components/time.astro";
import BlogLayout from "@/layouts/posts.astro";
import { envVars } from "@/lib/config/environment";
import { createExcerpt } from "@/shared/helpers/create-excerpt";
import { normalize } from "@/shared/utils";
import { getCollection } from "astro:content";

const status = ["draft", "preview", "published"] as const;

const entries = await getCollection("posts", ({ data }) => {
  return import.meta.env.MODE === "production"
    ? envVars.ENABLE_PREVIEW && data.status !== "draft"
      ? status.includes(data.status)
      : data.status === "published"
    : true;
});

const allEntries = entries.sort((a, b) => {
  return Number(b.data.publishedAt) - Number(a.data.publishedAt);
});

export const latest = (value?: Meta["publishedAt"]) => {
  if (!value) return false;
  const dateValue = new Date(value);
  const currentDate = new Date();
  const thirtyDaysAgo = new Date(
    currentDate.setDate(currentDate.getDate() - 30),
  );
  return dateValue >= thirtyDaysAgo;
};
---

<BlogLayout title="Blog" description="" jsonld={{}}>
  <Article id="article">
    <dl
      class="not-prose flex items-center justify-between gap-2 font-accent font-semibold text-teal-600 dark:text-teal-500"
    >
      <dd class="text-sm text-inherit">Posts</dd>
      <dt class="text-xs text-inherit">
        x{allEntries.length}
      </dt>
    </dl>

    <h1 id="heading" class="mt-6">Blog Posts</h1>

    <p>
      You'll find a mixed bag of content here. I'm mainly focussed on "How to"
      guides but every now and then I'll throw in a curve ball.
    </p>

    <Fragment>
      <div class="not-prose flex flex-col gap-6">
        {
          allEntries.map((entry, idx, array) => {
            const previous = array.at(idx - 1)?.data.publishedAt || new Date();
            const divide =
              idx === 0 ||
              new Date(entry.data.publishedAt).getMonth() !==
                new Date(previous).getMonth();

            return (
              <Fragment>
                {divide && <PostDivider datetime={entry.data.publishedAt} />}

                <article
                  aria-describedby={`${normalize(entry.slug)}-description`}
                  aria-labelledby={`${normalize(entry.slug)}`}
                  aria-setsize="-1"
                  aria-posinset={idx + 1}
                  data-latest={`${latest(entry.data.publishedAt)}`}
                  class="grid grid-cols-1 gap-3 rounded border border-slate-200 bg-white p-4 md:grid-cols-3 md:gap-6 dark:border-slate-800 dark:bg-slate-900/40"
                >
                  <div class="col-span-1 flex flex-col justify-center gap-2 md:col-span-2">
                    <div class="flex items-center gap-4">
                      <Time datetime={entry.data.publishedAt} class="" />
                    </div>

                    <Link href={`/blog/${entry.slug}`}>
                      <h3 class="">{entry.data.title}</h3>
                    </Link>
                    <p
                      id={`${normalize(entry.slug)}-description`}
                      class="text-sm font-light"
                    >
                      {createExcerpt(entry.body, 80)}
                    </p>

                    {entry.data.tags && (
                      <ul class="flex items-center gap-2">
                        {entry.data.tags.map((tag) => (
                          <li class="">
                            <Link href={`/tags/${tag}`} class="">
                              {tag}
                            </Link>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </article>
              </Fragment>
            );
          })
        }
      </div>
    </Fragment>
  </Article>
</BlogLayout>
