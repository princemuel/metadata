---
import { hasValues } from "@/shared/utils";
import type { MarkdownHeading } from "astro";
import TocHeading from "./toc-heading.astro";

type Props = { headings?: MarkdownHeading[] };

const { headings: Headings } = Astro.props;

interface Heading extends MarkdownHeading {
  subheadings: Heading[];
}

function buildToc(headings?: MarkdownHeading[]): Heading[] {
  if (!hasValues(headings)) return [];

  const toc: Heading[] = [];
  const parent = new Map<number, Heading>();

  for (let h of headings) {
    const heading: Heading = { ...h, subheadings: [] };
    parent.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) toc.push(heading);
    else parent.get(heading.depth - 1)?.subheadings.push(heading);
  }

  return toc;
}

const headings = buildToc(Headings);
---

{
  hasValues(headings) && (
    <nav aria-label="Table of Contents" class="font-mon flex flex-col gap-4">
      <h5 class="pl-4 text-xl font-bold capitalize text-slate-500 dark:text-slate-400">
        On this page
      </h5>
      <ul role="list" class="text-sm font-medium">
        {headings.map((heading) => {
          return <TocHeading heading={heading} />;
        })}
      </ul>
    </nav>
  )
}
