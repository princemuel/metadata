---
import { octokit } from "@/lib/config/clients";
import { moment } from "@/shared/helpers/datetime";
import { hasValues, pluralize } from "@/shared/utils";
import { Icon } from "astro-icon/components";
import { z } from "zod";
import Link from "./link.astro";
import Time from "./time.astro";

const response = await octokit.rest.activity.listEventsForAuthenticatedUser({
  username: "princemuel",
  per_page: 20,
});

const githubUrl = (url: string | URL) =>
  url.toString().replace("api.", "").replace("/repos", "");

const commitSchema = z
  .array(z.object({ message: z.string().default("") }))
  .default([]);
---

{
  (response.data ?? []).map((item, i) => {
    //@ts-expect-error
    const commits = commitSchema.parse(item.payload.commits);

    return (
      <Fragment>
        <article
          aria-posinset={i + 1}
          aria-setsize="-1"
          aria-describedby=""
          class:list={["rounded dark:bg-slate-900", "flex flex-col gap-4 p-4"]}
        >
          <header>
            <dl class="flex items-center gap-2 text-lg">
              <dt class="flex items-center gap-2">
                <span
                  aria-hidden="true"
                  data-event={item.type}
                  class:list={[
                    'data-[event="CreateEvent"]:bg-lime-500',
                    'data-[event="DeleteEvent"]:bg-red-600',
                    'data-[event="ForkEvent"]:bg-teal-500',
                    'data-[event="IssueCommentEvent"]:bg-yellow-500',
                    'data-[event="PullRequestEvent"]:bg-teal-500',
                    'data-[event="PushEvent"]:bg-teal-500',
                    'data-[event="WatchEvent"]:bg-teal-500',
                    "size-3 rounded-pill",
                  ]}
                />
                <span class="text-xs font-semibold">Event:</span>
              </dt>

              <dd class="text-xs font-light">{item.type}</dd>
            </dl>
            <Time
              datetime={new Date(item.created_at || "")}
              class="text-xs font-medium"
            >
              {moment.format(new Date(item.created_at || ""))}
            </Time>
          </header>

          <address class="not-italic">
            <p class="flex items-center gap-2">
              <span class="text-xs font-semibold">User:</span>
              <Link
                href={`https://github.com/${item.actor.login}`}
                class="text-xs font-light"
              >
                {item.actor.login}
              </Link>
            </p>

            <p class="flex items-center gap-2 text-lg">
              <span class="text-xs font-semibold">Repo:</span>
              <Link
                class="text-xs font-light underline"
                href={githubUrl(item.repo.url)}
              >
                {item.repo.name}
              </Link>
            </p>
          </address>

          {hasValues(commits) ? (
            <div class="flex flex-col gap-1">
              <div class="flex items-center gap-2">
                <Icon name="message" class={"text-xl text-pink-700"} />
                <output class="text-xs font-medium">
                  {pluralize(commits.length, "Message")}
                </output>
              </div>
              <ul class="flex list-disc flex-col gap-1 pl-4 marker:text-pink-500">
                {commits.map((commit) => (
                  <li class="text-xs">{commit.message}</li>
                ))}
              </ul>
            </div>
          ) : null}
        </article>
      </Fragment>
    );
  })
}
